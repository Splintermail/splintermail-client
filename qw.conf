# splintermail's qwwq configuration
{
    pkgname = "@PROJECT_NAME@"
    pkgvermaj = "@PROJECT_VERSION_MAJOR@"
    pkgvermin = "@PROJECT_VERSION_MINOR@"
    pkgverbld = "@PROJECT_VERSION_PATCH@"
    install_prefix = "@CMAKE_INSTALL_PREFIX@"
    build_dir = "@PROJECT_BINARY_DIR@"
    src_dir = "@PROJECT_SOURCE_DIR@"
    version = "%s.%s.%s"%[pkgvermaj pkgvermin pkgverbld]

    maintainer = {
        name = "Splintermail Dev"
        email = "dev@splintermail.com"
        string = "%s <%s>"%[maintainer.name maintainer.email]
    }

    "Pkg Name" = "Splintermail"
    "pkg name" = G."Pkg Name".lower()
    "Pkg_Name" = G."Pkg Name".repl(" " "_")
    "pkg_name" = G."Pkg Name".lower().repl(" " "_")
    "Pkg-Name" = G."Pkg Name".repl(" " "-")
    "pkg-name" = G."Pkg Name".lower().repl(" " "-")

    osx_pkg_id = "com.splintermail.splintermail"

    pkgdescr_short = "client application for Splintermail.com users"
    pkgdescr_long = func(width joiner="\n" ->
        joiner^[
            "The `splintermail` application serves four purposes:".wrap(
                width indent="" hang=""
            )
            *[for x=pdl -> x.wrap(width indent="  " hang="     ")]
        ]
    )
    pdl = [
        "1) `splintermail citm` implements the \"crypto-in-the-middle\" "
         + "(CITM) model, which is the glue that connects an email client on "
         + "your computer to the fully encrypted email stored on the "
         + "Splintermail.com server.  In CITM mode this application will "
         + "host an IMAP server on your local machine which your email "
         + "client can connect to."
        "2) `splintermail configure` can configure your local CITM server "
         + "after installation."
        "3) `splintermail status` can report on the status of your local CITM "
         + "server."
        "4) `splintermail` has many additional subcommands for controlling "
         + "your account from the command line, as an alternative to going "
         + "to the Splintermail.com website."
    ]

    subcommands = ["citm" "configure" "status" "ACCOUNT_ACTION"]

    # application options
    mkopt = func(
        short arg summary detail=null default=null completion=null
    ->
        {
             short=short
             arg=arg
             summary=summary
             detail=detail
             default=default
             completion=completion
        }
    )
    # expand opt into args for a function
    optcall = func(f o -> _optcall(f o opts.get(o)))
    _optcall = func(f long o ->
        f(long o.short o.arg o.summary o.detail o.default o.completion)
    )
    opts = {
        "--help" = mkopt("-h" null "Print help information and usage.")
        "--version" = mkopt("-v" null "Print version.")
        "--debug" = mkopt("-D" null "Show more verbose output."
            detail="Note that this option will print passwords to stdout in "
                  +"plain text."
        )
        "--splintermail-dir" = mkopt("-d" "DIR"
            summary="Where to store decrypted emails and account info."
            default=sm_dir
            completion="dir"
        )
        "--config" = mkopt("-c" "FILE"
            summary="Override default config file loading sequence."
            default="(see FILES section)"
            completion="file"
        )
        "--dump-conf" = mkopt(null null "Dump config options to stdout.")
        "--logfile" = mkopt("-l" "FILE" "Location of the log file."
            default="${splintermail-dir}/citm_log"
            completion="file"
        )
        "--no-logfile" = mkopt("-L" null "No log file should be kept."
            detail="Good for systemd, which keeps logs based on stdin and "
                  +"stdout."
        )
        "--listen" = mkopt(null "PORT"
            summary="Where to listen for incoming IMAP traffic, in "
                   +"SCHEME://HOST:PORT format.  SCHEME may be one of: "
                   +"tls, starttls, or insecure.  May be specified multiple "
                   +"times to create multiple listeners."
            default="[starttls://127.0.0.1:143, starttls://[::1]:143, "
                   +"tls://127.0.0.1:993, tls://[::1]:993]"
        )
        "--cert" = mkopt(null "CERT"
            summary="TLS certificate for the local IMAP server."
            default="${splintermail-dir}/citm-127.0.0.1-cert.pem"
            completion="file"
        )
        "--key" = mkopt(null "KEY" "TLS key for the local IMAP server."
            default = "${splintermail-dir}/citm-127.0.0.1-key.pem"
            completion = "file"
        )
        "--socket" = mkopt("-s" "SOCKET"
            summary="Name of the status socket for the local IMAP server."
            default=status_sock_path
            completion = "file"
        )
        "--follow" = mkopt(null null
            summary="Continue monitoring after initial report"
        )
        "--force" = mkopt(null null
            summary="Write configuration files without checking status."
            detail="This skips some safety checks but can succeed before the "
                  +"splintermail citm server has been started."
        )
        "--user" = mkopt("-u" "EMAIL"
            summary="Which account should be used for ACCOUNT_COMMAND."
            detail="This will take the form of a full email address.  Not "
                  +"necessary unless you use multiple Splintermail accounts "
                  +"on this computer."
        )
        "--account-dir" = mkopt("-a" "DIR"
            summary="Where per-account API tokens are stored."
            default="(see FILES section)"
            completion="dir"
        )
    }
    opts_common = [
        "--help"
        "--version"
        "--debug"
        "--config"
        "--dump-conf"
    ]
    opts_citm = [
        "--splintermail-dir"
        "--logfile"
        "--no-logfile"
        "--listen"
        "--cert"
        "--key"
        "--socket"
    ]
    opts_configure = [
        "--force"
        "--socket"
        "--splintermail-dir"
    ]
    opts_status = [
        "--follow"
        "--socket"
    ]
    opts_apis = [
        "--user"
        "--account-dir"
    ]
    optlist = [*opts_common *opts_citm *opts_configure *opts_status *opts_apis]
    # optlist has some overlap, so we also have a uniqopts list
    uniqopts = [*opts_common *opts_citm "--force" "--follow" *opts_apis]
    opts_w_arg = [for o=uniqopts -> if(opts.get(o).arg==null:skip o)]

    # apis
    mkapi = func(
        short long=null arg=null choices=null
    ->
        {short=short long=long arg=arg choices=choices}
    )
    apicall = func(f a -> _apicall(f a apis.get(a)))
    _apicall = func(f name a -> f(name a.short a.long a.arg a.choices))
    apis = {
        account_info = mkapi("View a summary of your account information.")
        change_password = mkapi("Change your Splintermail account password.")
        list_aliases = mkapi("Show a list of all aliases on your account.")
        add_random_alias = mkapi("Generate a new random alias.")
        add_primary_alias = mkapi(
            short="Request ALIAS as a new primary alias."
            arg="ALIAS"
        )
        delete_alias = mkapi(
            short="Delete ALIAS from your account."
            arg="ALIAS"
        )
        list_devices = mkapi(
            short="List devices keys registered to your account."
            long="Splintermail encrypts your stored emails to each device "
                +"registered to your account."
        )
        delete_device = mkapi(
            short="Unregister a device from your account."
            arg="DEVICE"
        )
        list_tokens = mkapi(
            short="List API Tokens registered to your account."
            long="API Tokens are used to authorize changes to your account."
        )
        delete_token = mkapi(
            short="Revoke an API Token."
            arg="TOKEN"
        )
        list_installations = mkapi(
            short="List installations authorized to your account."
            long="After installing splintermail on a device and agreeing to "
                +"the letsencrypt.org terms of service, an installation token "
                +"is created and assiged a unique subdomain.  TLS "
                +"certificates created for that unique subdomain are "
                +"associated with that installation so that no other device "
                +"can create certificates for that subdomain and so that "
                +"certificate-related email can be forwarded to you."
        )
        delete_installation = mkapi(
            short="Delete an installation."
            long="You may delete an installation to end your agreement with "
                +"the letsencrypt.org Terms of Service and disassociate "
                +"the unique subdomain from your account.  Note that deleting "
                +"an installation is different from uninstalling the "
                +"splintermail software on your device."
            arg="INST"
        )
        # spam_sorting = mkapi(
        #     short="Turn spam sorting on/off following spam analysis."
        #     long="Should be enabled for IMAP users.  "
        #         +"Has no effect if spamassassin is turned off."
        #     arg="(on|off)"
        #     choices=["on" "off"]
        # )
        # spamassassin = mkapi(
        #     short="Turn spamassassin on/off for incoming emails."
        #     arg="(on|off)",
        #     choices=["on" "off"]
        # )
        # delete_all_aliases = mkapi("Quickly delete all your aliases.")
        # delete_all_mail = mkapi(
        #     "Quickly delete all your mail from the server."
        # )
    }
    apis_general = ["account_info" "change_password"]
    apis_aliases = [
        "list_aliases"
        "add_random_alias"
        "add_primary_alias"
        "delete_alias"
    ]
    apis_devices = ["list_devices" "delete_device"]
    apis_tokens = ["list_tokens" "delete_token"]
    apis_inst = ["list_installations" "delete_installation"]
    apilist = [
        *apis_general *apis_aliases *apis_devices *apis_tokens *apis_inst
    ]
    apis_w_arg = [for a=apilist -> if(apis.get(a).arg==null:skip a)]

    files = {
        config = {
            "1" = "By default, `splintermail` will parse the following config "
                + "files in order, giving higher precedence to values found "
                + "earlier in the search:"
            "bullets" = switch(os
                "windows": [
                    "%APPDATA%\\splintermail\\splintermail.conf"
                    "C:\\Program Files\\splintermail\\splintermail.conf"
                ]
                "osx": ["$HOME/.splintermail.conf" "/etc/splintermail.conf"]
                "linux": [
                    "$XDG_CONFIG_HOME/splintermail.conf"
                    "$HOME/.splintermail.conf"
                    "/etc/splintermail.conf"
                ]
                puke(os)
            )
            "2" = "If a specific config file is provided via the the "
                + "`--config`, the default config files are not read."
        }
        citm = {
            "1" = "When in CITM mode, `splintermail` will download encrypted "
                + "emails, decrypt them, and store them in the following "
                + "directory:"
            "bullets" = [sm_dir]
            "2" = "This location can be altered using the "
                + "`--splintermail-dir` option."
        }
        accounts = {
            "1" = "In ACCOUNT_COMMANDS, `splintermail` will read/write "
                + "API tokens in the following directory:"
            "bullets" = switch(os
                "windows":["%APPDATA%\\splintermail"]
                "osx":["$HOME/Library/splintermail"]
                "linux":[
                    "$XDG_CONFIG_HOME/splintermail    # if $XDG_CONFIG_HOME "
                    + "is set"
                    "$HOME/.cache/splintermail        # otherwise"
                ]
                puke(os)
            )
            "2" = "This location can be configured using the `--account-dir` "
                + "option."
        }
    }

    sm_dir = switch(os
        "windows": "C:/ProgramData/splintermail"
        "/var/lib/splintermail"
    )
    share_dir = switch(os
        "windows": puke("windows has no share dir")
        "osx": "/usr/local/share/splintermail"
        "/usr/share/splintermail"
    )
    config_path = switch(os "windows":puke(os) "/etc/splintermail.conf")
    status_sock_path = switch(os
        "windows": "\\\\.\\pipe\\splintermail-citm"
        "osx": "/var/run/splintermail"
        "linux": "/run/splintermail"
        puke(os)
    )

    # print help
    printf_escape = func(t ->
        t.repl("\\" "\\\\").repl('"' '\\"').repl("%" "%%")
    )
    print_help = {
        optrow = func(
            long short arg summary detail default completion
        ->
            [
                "  "+if(short==null:"" short)
                ("%s %s"%[long if(arg==null:"" arg)]).rpad("23")
                "\n"^[
                    (summary + if(detail==null:"" " "+detail)).wrap("52")
                    if(default==null:skip ("Default: "+default).wrap("52"))
                ]
            ]
        )
        opts_from_list = func(l ->
            printf_escape(
                table([for o=l -> optcall(print_help.optrow o)])
            ).pre('"').post('\\n"')
        )
        apirow = func(
            name short long arg choices
        ->
            [
                "  "+("%s %s"%[name if(arg==null:"" arg)]).rpad("26")
                (short+if(long==null:"" "  "+long)).wrap("52")
            ]
        )
        # expect keys: ["1" "bullets" "2"]
        file = func(f ->
            printf_escape(
                "\n"^[
                    f."1".wrap("79" indent="        " hang="        ")
                    ""
                    ("\n"^f.bullets).pre("            ")
                    ""
                    f."2".wrap("79" indent="        " hang="        ")
                ]
            ).pre('"').post('\\n"')
        )
    }

    # man page
    man_escape = func(
        t -> t.repl("-" "\\-").repl(" `" " \\fB").repl("` " "\\fR ")
              .repl("`," "\\fR,")
    )
    manopt = func(long short arg summary detail default completion ->
        ""^[
            ".TP\n.BR "
            if(short==null:""  '"%s" ", " '%[short])
            long
            if(arg==null:"\n" ' " \\fI%s\\fR"\n'%[arg])
            if(summary==null:"" summary)
            "\n"
            if(detail==null:"" detail)
            if(default==null:"" "\n\\rDefault: %s"%[default])
        ]
    )
    manapi = func(
        name short long arg choices
    ->
        ""^[
            ".TP\n.BR "
            name
            if(arg==null:"" ' " \\fI%s\\fR"'%[arg])
            "\n"
            short
        ]
    )
    # expect keys: ["1" "bullets" "2"]
    manfile = func(f ->
        "\n"^[
            man_escape(f."1").wrap("79")
            '\\"'
            ".RS"
            ".nf"
            man_escape("\n"^f.bullets)
            ".fi"
            ".RE"
            '\\"'
            man_escape(f."2").wrap("79")
        ]
    )

    # zsh completions
    zsh = {
        # x is either long or short
        comp_opt = func(x summary long arg comp ->
            ""^[
                "'" x "[" summary "]"
                *if(arg==null:[] [":" long ":"])
                switch(comp
                    null:skip "file":"_files" "dir":"_files -/" puke(comp)
                )
                "'"
            ]
        )
        comp_apis = func(l -> [for a=l -> '%s\\:"%s"'%[a apis.get(a).short]])
    }

    # helpers
    null2skip = func(x -> if(x==null:skip x))
    null2empty = func(x -> if(x==null:"" x))

    os = puke("os should be set on the command line")
}
