# this will do some ZSH-style completion
__splintermail_format_completion () {
    local cmdtok curtok prevtok
    local -a choices
    cmdtok="$1"
    curtok="$2"
    prevtok="$3"
    shift ; shift ; shift
    choices=("$@")

    # build an array of vars and descriptions
    local i line maxvarlen
    local -a vars descr
    vars=()
    descr=()
    maxvarlen=0
    local IFS=$'\n'
    for line in "${choices[@]}"; do
        # get fields from line
        IFS=: read -ra f <<<"$line"
        # check if this line matches our current token
        if [ "${f[0]:0:${#curtok}}" = "$curtok" ] ; then
            vars+=("${f[0]}")
            descr+=("${f[1]}")
            [ "${#f[0]}" -gt "$maxvarlen" ] && maxvarlen="${#f[0]}"
        fi
    done

    # if the length of matches is 1, don't show description (it will complete)
    if [ "${#vars[@]}" -eq 1 ] ; then
        COMPREPLY=("${vars[0]}")
    else
        COMPREPLY=($(
            for i in `seq 0 $((${#vars[@]}-1))` ; do
                line=$(printf "%-*s -- %s" "$maxvarlen" "${vars[i]}" "${descr[i]}")
                printf "%-*s\n" $COLUMNS $line
            done
            ))
    fi
}

__splintermail () {
    local cmdtok curtok prevtok skipnext
    local -a prevwords prevargs switches opts_w_arg choices
    # turn off complete-file-if-no-compreply and complete-only-dirs-for-files
    compopt +o default +o dirnames
    # example for explaining variables
    ## splintermail --switch --opt optarg api_cmd api_arg --switch --opt optarg
    ## should be splintermail
    cmdtok=$1
    # whatever current token is being typed
    curtok=$2
    # last completed token
    prevtok=$3
    # this array will include "api_cmd" and "api_arg"
    prevargs=()
    # this array will have "--switch" and "--opt" and "optarg" (twice each)
    options=()
    # for distinguishing switches from options
    opts_w_arg=(QW "\n                "^opts_w_arg + " "
                + " "^[for o=opts_w_arg -> null2skip(opts.get(o).short)] WQ)
    # separate args from switches and options
    optargnext=""
    for r in "${COMP_WORDS[@]:1:$COMP_CWORD-1}" ; do
        # if last arg was an option with an argument, this arg goes with options
        if [ -n "$optargnext" ] ; then
            options+=("$r")
            optargnext=""
            continue
        fi
        if [[ "$r" = -* ]] ; then
            options+=("$r")
            for a in "${opts_w_arg[@]}" ; do
                [ "$r" = "$a" ] && optargnext="y" && break
            done
        else
            prevargs+=($r)
        fi
    done

    #### Now, the actual completion logic

    # always complete short options
    if [[ "$curtok" =~ ^-[^-]$ ]] ; then
        __splintermail_format_completion "$@" "$curtok"
        return
    fi


    # complete option arguments based on prevtok
QW
("\n"^[for o=opts_w_arg ->
    optcall(func(
        long short arg summary detail default completion
    ->
        ""^[
            'if [ "$prevtok" = "' long '" ]'
            if(short==null:skip ' || [ "$prevtok" == "'+short+'" ]')
            " ; then\n"
            switch(completion
                null:skip
                "file":"    compopt -o default\n"
                "dir":"    compopt -o default -o dirnames\n"
                puke(completion)
            )
            "    return\n"
            "fi"
        ]
    ) o)
]).pre("    ")
WQ


    # complete api arguments based on prevargs
QW
("\n"^[for a=apis_w_arg ->
    apicall(func(
        name short long arg choices
    ->
        ""^[
            'if [ "${prevargs[*]}" = "' name '" ] ; then\n'
            "    choices=(\n"
            if(choices==null:skip "\n"^[for c=choices -> '        "%s:"'%[c]])
            "    )\n"
            '    __splintermail_format_completion "$@" "${choices[@]}"\n'
            "    return\n"
            "fi"
        ]
    ) a)
]).pre("    ")
WQ


    # otherwise check if there is an option to complete
    if [[ "$curtok" =~ ^-.* ]] ; then
        choices=(
QW "\n"^[for o=uniqopts -> '            "%s:%s"'%[o opts.get(o).summary]] WQ
        )
        __splintermail_format_completion "$@" "${choices[@]}"
        return
    fi

    # if we have no arguments so far, offer a CITM or an API command
    if [ "${#prevargs[@]}" -eq 0 ] ; then
        choices=(
            "citm:Run the local decrypting email server."
            "configure:Configure the local citm server."
            "status:Report the status of the local citm server."
QW "\n"^[for a=apilist -> '            "%s:%s"'%[a apis.get(a).short]] WQ
            )
        __splintermail_format_completion "$@" "${choices[@]}"
        return
    fi

    # otherwise there are no completions
    return
}


complete -F __splintermail splintermail
