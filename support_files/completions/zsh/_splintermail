#compdef splintermail

local -a prevwords prevargs options opts_w_arg
local cmd optargnext

# get command so we don't have to hard code it
cmd="$words[1]"
# get all non-command tokens on commandline, separate args from switches
prevwords=($words[2,-2])
prevargs=()
options=()
opts_w_arg=(
QW table(
    [ for a=opts_w_arg -> [null2empty(opts.get(a).short) a] ]
).pre("    ") WQ
)
optargnext=""
for r in $prevwords ; do
    # if last arg was an option with an argument, this arg goes with options
    if [ -n "$optargnext" ] ; then
        options+="$r"
        optargnext=""
        continue
    fi
    if [[ "$r" = -* ]] ; then
        options+="$r"
        for a in $opts_w_arg ; do
            [ "$r" = "$a" ] && optargnext="y" && break
        done
    else
        prevargs+="$r"
    fi
done

# list of options common to all completions
optspecs=(
    QW "\n    "^[for o=optlist -> *optcall(
        func(long short arg summary detail default completion ->
            [for x=[long null2skip(short)] ->
                zsh.comp_opt(x summary long arg completion)
            ]
        ) o)
    ] WQ
)

case "$prevargs" in
    "")
    _arguments $optspecs \
        '::device commands:(( \
            QW " \\\n            "^zsh.comp_apis(apis_devices) WQ))' \
        '::token commands:(( \
            QW " \\\n            "^zsh.comp_apis(apis_tokens) WQ))' \
        '::alias commands:(( \
            QW " \\\n            "^zsh.comp_apis(apis_aliases) WQ))' \
        '::account commands:(( \
            QW " \\\n            "^zsh.comp_apis(apis_account) WQ))' \
        ;;
    QW
        "\n    "^[for a=apis_w_arg ->
            *[
                '"%s"*)'%[a]
                '    _arguments $optspecs "::" ":%s:%s";;'%[
                    a
                    if(apis.get(a).choices==null:""
                        " "^apis.get(a).choices
                    )
                ]
            ]
        ]
    WQ
    *)
        _arguments $optspecs "::";;
esac
