#!/bin/sh

set -e

# useful variables
share_dir="QWER share_dir REWQ"
sm_dir="QWER sm_dir REWQ"
old_ca_file="$sm_dir/QWER old_ca_name REWQ"
old_key_file="$sm_dir/QWER old_key_name REWQ"
old_cert_file="$sm_dir/QWER old_cert_name REWQ"
ca_file="$sm_dir/QWER ca_name REWQ"
key_file="$sm_dir/QWER key_name REWQ"
cert_file="$sm_dir/QWER cert_name REWQ"
ca_common_name="QWER ca_common_name REWQ"

# get hash of original default config file
orig_config="$share_dir/splintermail.conf.orig"
if [ -f "$orig_config" ] ; then
    old_config_hash=$(shasum -a 256 "$orig_config" | awk '{print($1)}')
else
    old_config_hash="-"
fi

# write the new default config file
rm -f "$orig_config"
cat > "$orig_config" << EOF
QWER["strip", ["cat", ["filerel", "../splintermail.conf"]]]REWQ
EOF

# get the hash of the config file currently on the system
if [ -f "QWER config_path REWQ" ] ; then
    cur_config_hash=$(shasum -a 256 "QWER config_path REWQ" | awk '{print($1)}')
else
    cur_config_hash="-"
fi

# overwrite the current config file if it hasn't changed from the old one
if [ "$old_config_hash" = "$cur_config_hash" ] ; then
    # config file unchanged, copy the new default
    cp "$orig_config" "QWER config_path REWQ"
else
    # this is where a UI warning *should* be generated
    true
fi

# user should not be tempted to write into the original config file
chmod -w "$orig_config"

# make sure the _splintermail user exists
if ! dscl . list /Users | grep -q '^_splintermail$' ; then
    # get an open UID/GID pair
    uid=$(dscl . list /Users UniqueID | awk '{if($2 > temp){temp = $2}} END{print(temp + 1)}')
    gid=$(dscl . list /Groups PrimaryGroupID | awk '{if($2 > temp){temp = $2}} END{print(temp + 1)}')
    # if they are not equal, take the higher one
    [ "$uid" -lt "$gid" ] || uid="$gid"

    # create the group
    dscl . -create /Groups/_splintermail
    dscl . -create /Groups/_splintermail PrimaryGroupID $uid
    # create the user
    dscl . -create /Users/_splintermail
    dscl . -create /Users/_splintermail UserShell /usr/bin/false
    dscl . -create /Users/_splintermail UniqueID $uid
    dscl . -create /Users/_splintermail PrimaryGroupID $uid
    dscl . -create /Users/_splintermail RealName "Splintermail Daemon"
fi

# make the splintermail directory
if [ ! -d "$sm_dir" ] ; then
    mkdir -p "$sm_dir"
    chmod 700 "$sm_dir"
    chown _splintermail:_splintermail "$sm_dir"
fi

# migrate old certificates from v0.2 installations
if [ -f "$old_cert_file" ] ; then
    mv "$old_cert_file" "$cert_file"
fi
if [ -f "$old_key_file" ] ; then
    mv "$old_key_file" "$key_file"
fi
if [ -f "$old_ca_file" ] ; then
    mv "$old_ca_file" "$ca_file"
fi

# always generate new SSL certificates, since osx limits certificate lifetimes

# attempt to untrust/delete any stored certificate from before
security delete-certificate -c "$ca_common_name" || true
# now generate files
sh "$share_dir/keygen.sh" "$share_dir/openssl.cnf" "$sm_dir"
# trust the generated certificate authority
security add-trusted-cert -d -r trustRoot \
    -k "/Library/Keychains/System.keychain" "$ca_file"

# enable/start the launchd service
launchctl load -w "/Library/LaunchDaemons/com.splintermail.citm.plist"

exit 0
