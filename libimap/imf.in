# imf grammar
#  rfc5322: imf
#  rfc5335: utf8 extensions to imf
#  rfc5234: general ANBF
#  rfc2045: mime, part 1/5, mime-related headers

{{#include <libimap/libimap.h>

// note that *prev might be NULL but *buf must point to the scanner's bytes.
static inline dstr_off_t dstr_off_zero(dstr_off_t *prev, const dstr_t *buf){
    if(prev == NULL){
        return (dstr_off_t){ .buf = buf, .start = 0, .len = 0 };
    }
    return (dstr_off_t){
        .buf = prev->buf,
        .start = prev->start + prev->len,
        .len = 0,
    };
}

// steal %param buf via a macro
#define DSTR_OFF_ZERO(prev) dstr_off_zero(prev, buf)

// for local_part_or_phrase_xbr
static ie_dstr_t *with_spaces(derr_t *E, ie_dstr_t *list){
    if(is_error(*E)){
        ie_dstr_free(list);
        return NULL;
    }
    ie_dstr_t *out = NULL;
    ie_dstr_t *next = list;
    for(ie_dstr_t *p = next; p; p = next){
        // break the links as we go
        next = p->next;
        p->next = NULL;
        out = ie_dstr_concat(E, out, p);
    }
    // remove trailing whitespace
    out->dstr.len = dstr_rstrip_chars(out->dstr, ' ').len;
    return out;
}

// for local_part_or_phrase_xbr
static ie_dstr_t *without_spaces(derr_t *E, ie_dstr_t *list){
    if(is_error(*E)){
        ie_dstr_free(list);
        return NULL;
    }
    ie_dstr_t *out = NULL;
    ie_dstr_t *next = list;
    for(ie_dstr_t *p = next; p; p = next){
        // break the links as we go
        next = p->next;
        p->next = NULL;
        if(dstr_cmp2(p->dstr, DSTR_LIT(" ")) == 0){
            ie_dstr_free(p);
        }else{
            out = ie_dstr_concat(E, out, p);
        }
    }
    return out;
}

}}

%generator c;
%prefix imf;
%param E {derr_t *};
%param buf {const dstr_t *};

%kwarg semloc_type dstr_off_t;
%kwarg span_fn dstr_off_extend;
%kwarg zero_loc_fn DSTR_OFF_ZERO;
%kwarg error_fn imf_handle_error;

%root hdrs;
%root from_field;
%root sender_field;
%root reply_to_field;
%root to_field;
%root cc_field;
%root bcc_field;
%root in_reply_to_field;
%root msg_id_field;
%root mime_version_field;
%root content_type_field;

%type hdr {imf_hdr_t*} {imf_hdr_free($$);};
%type hdrs {imf_hdrs_t*} {imf_hdrs_free($$);};
%type addr {ie_addr_t*} {ie_addr_free($$);};
%type dstr {ie_dstr_t*} {ie_dstr_free($$);};
%type bool {bool};

# non-keyword tokens
NIL;
EOL;  # CR/CRLF/LFCR/LF handled by tokenizer
WS;
NON_WS_CTRL;
DOT;
RPAREN;
LPAREN;
LANGLE;
RANGLE;
LBRACKET;
RBRACKET;
ARUBA;
COMMA;
SEMI;
COLON;
BACKSLASH;
DQUOTE;
SLASH;
QUESTION;
EQ;
TEXT;
UTF8;
EIGHTBIT;
NUM;
EOF;

# keyword tokens
MESSAGE;
MULTIPART;
RFC822;
DIGEST;
%fallback TEXT NUM MESSAGE MULTIPART RFC822 DIGEST;

### ENTIRE DOCUMENTS ###
# treat all headers unstructured
# structured things can be parsed in a second pass
# don't bother parsing the body itself; it's always just "what's left".  If
# after the first pass we detect that the body contains an imf-like structure,
# we might end up parsing it in a second pass (again, just the headers).

# header separator might be missing in some non-compliant bodyless messages
eoh = EOL | EOF;

hdrs:hdrs =
    hdr:h
    *(hdr:h2 { $h = imf_hdr_add(E, $h, STEAL(imf_hdr_t, &$h2)); } )
    eoh:sep
    { $$ = imf_hdrs_new(E, @$, @sep, STEAL(imf_hdr_t, &$h)); }
;

# field-name is any printable character except COLON
# technically even utf8 isn't allowed there, but we'll allow it anyway.
field_name = 1*(
# | NIL
# | EOL
# | WS
# | NON_WS_CTRL
| DOT
| RPAREN
| LPAREN
| LANGLE
| RANGLE
| LBRACKET
| RBRACKET
| ARUBA
| COMMA
| SEMI
# | COLON
| BACKSLASH
| DQUOTE
| SLASH
| QUESTION
| EQ
| TEXT
| UTF8
| EIGHTBIT
| NUM
);

# rfc5322: unstructured is VCHAR+WSP (can be joined by fws)
# obs-unstruct allows any number of LF or CR which do not form a CRLF, which is
# absolutely insane.  We don't allow that.  Otherwise, unstructured fields can
# contain anything they want.  Note that the FWS is handled by the definition
# of hdr, not here.
unstruct =
| NIL
# | EOL
| WS
| NON_WS_CTRL
| DOT
| RPAREN
| LPAREN
| LANGLE
| RANGLE
| LBRACKET
| RBRACKET
| ARUBA
| COMMA
| SEMI
| COLON
| BACKSLASH
| DQUOTE
| SLASH
| QUESTION
| EQ
| TEXT
| UTF8
| EIGHTBIT
| NUM
;

xunstruct = *unstruct;

# rfc5322: header fields cannot have whitespace before the colon
# obs-optional allows that though, so we allow it
hdr:hdr =
    field_name:n
    *WS
    COLON
    xunstruct:v
    EOL
    *(
        WS
        xunstruct:v2 {@v = dstr_off_extend(@v, @v2);}
        EOL
    )
    { $$ = imf_hdr_new(E, @$, @n, @v); }
;

### IMF BASICS ###

# from ANBF rfc (rfc5234):
# WSP = \t SPACE
# VCHAR = 0x21 - 0x7E
# CTL = 0x00 - 0x1F , 0x7F

# FWS: [*WS EOL] WS *WS
# obs-FWS: WS *WS *(EOL WS *WS)
# FWS allows for eol-ws instead of ws-eol-ws.
# obs-FWS allows for multiple consecutive folds.
# We allow a superset of both.
# Note that fws wouldn't be safe to use if you were _expecting_ an EOL; the
# repeat point would be wrong.  But since we have a two-step parser, when we
# parse a structured header, we've already excluded the header-terminating EOL
# from the text we examine, so we can safely ignore that issue.
fws = [EOL] WS;

# ctext is VCHAR except ()\
# obs-ctext adds control characters except \0 \r \n \t SPACE
# utf8-ctext adds UTF8
# sum total is: UTF8 or ASCII except ( ) \\ \0 \r \n \t SPACE
ctext = 1*(
# | NIL
# | EOL
# | WS
| NON_WS_CTRL
| DOT
# | RPAREN
# | LPAREN
| LANGLE
| RANGLE
| LBRACKET
| RBRACKET
| ARUBA
| COMMA
| SEMI
| COLON
# | BACKSLASH
| DQUOTE
| SLASH
| QUESTION
| EQ
| TEXT
| UTF8
| EIGHTBIT
| NUM
);

# comment: again we allow consecutive folds, out of lazieness and leniency
comment = LPAREN *(fws | ctext | quoted_pair | comment) RPAREN;

# cfws: again we allow consecutive folds.
cfws = 1*(fws | comment);

# "maybe break"
xbr:bool = *(cfws {$$ = true;});

# atom is always joined by cfws
# ALPHA DIGIT UTF8 !#$%&'*+-/=?^_`{|}~
atom = 1*(
| SLASH
| QUESTION
| EQ
| TEXT
| UTF8
| EIGHTBIT
| NUM
);

# dot-atom is atoms joined by '.' but _not_ cfws
# dot-atom itself is always joined by cfws
dot_atom = atom *(DOT atom);

# qtext is VCHAR except "\
# obs-qtext adds control characters except \0 \r \n \t SPACE
# utf8-qtext adds UTF8
# sum total is: UTF8 or ASCII except \\ " \0 \r \n \t SPACE
qtext = 1*(
# | NIL
# | EOL
# | WS
| NON_WS_CTRL
| DOT
| RPAREN
| LPAREN
| LANGLE
| RANGLE
| LBRACKET
| RBRACKET
| ARUBA
| COMMA
| SEMI
| COLON
# | BACKSLASH
# | DQUOTE
| SLASH
| QUESTION
| EQ
| TEXT
| UTF8
| EIGHTBIT
| NUM
);

# quoted-pair is backslash followed by VCHAR or WSP
# obs-qp adds control characters except \r and \n
# utf8-quoted-par adds UTF8
# obs-qp actually allows \r and \n, which is insane.  We disallow that.
# Note that the obs-qp could't cancel the whole EOL anyway since EOL is
# supposed to be two characters long.  If our parser could handle CR and NL
# individually (rather than having the scanner handle it) we could allow it.
# Additionally, proper quoted-pair support would require us to pull exactly
# one character from the scanner after the backslash, but it turns out that we
# only have to pull one character from the *escapable* character sets, which is
# basically RPAREN, DQUOTE, NON_WS_CTRL, and EIGHTBIT.  Of those, only EIGHTBIT
# was even multi-character to begin with.
escapable =
| NIL
# | EOL
| WS
| NON_WS_CTRL
| DOT
| RPAREN
| LPAREN
| LANGLE
| RANGLE
| LBRACKET
| RBRACKET
| ARUBA
| COMMA
| SEMI
| COLON
| BACKSLASH
| DQUOTE
| SLASH
| QUESTION
| EQ
| TEXT
| UTF8
| EIGHTBIT
| NUM
;
quoted_pair:dstr = BACKSLASH escapable:esc { $$ = ie_dstr_from_off(E, @esc); };

qcontent_part = qtext | quoted_pair;
qcontent:dstr = 1*(qcontent_part:q {$$ = ie_dstr_append_from_off(E, $$, @q);});

# quoted_string is always joined by cfws
quoted_string:dstr =
    DQUOTE
    # any number of folds convert to just one space
    [fws *fws {$$ = ie_dstr_append2(E, $$, DSTR_LIT(" "));}]
    *(
        qcontent:q {$$ = ie_dstr_concat(E, $$, STEAL(ie_dstr_t, &$q));}
        # any number of folds convert to just one space
        [fws *fws {$$ = ie_dstr_append2(E, $$, DSTR_LIT(" "));}]
    )
    DQUOTE;

# word is always joined by cfws
word:dstr = (
    | atom:a           {$$ = ie_dstr_from_off(E, @a);}
    | quoted_string:q  {$$ = STEAL(ie_dstr_t, &$q);}
);

# phrase is just a bunch of words
# obs-phrase adds the possibility of "." as well, but not at the beginning
phrase_xbr:dstr =
    word:w {$$ = STEAL(ie_dstr_t, &$w); }
    *(
        (
          | cfws {$$ = ie_dstr_append2(E, $$, DSTR_LIT(" "));}
          | DOT {$$ = ie_dstr_append2(E, $$, DSTR_LIT("."));}
        )
        [word:w2 {$$ = ie_dstr_concat(E, $$, STEAL(ie_dstr_t, &$w2));}]
    )
    # Remove trailing whitespace.
    {$$->dstr.len = dstr_rstrip_chars($$->dstr, ' ').len;}
;

### From-related things ###

# local-part is dot-atom | quoted-string
# obs-local-part allows word *(DOT word), which adds cfws
# We'll support a superset of those, which allows for leading and trailing DOT
# In fact, we're so lazy, we just let local_part be a phrase.
# Also that for local_part, obsolete folds should not result in a space.
local_part_xbr:dstr =
    word:w {$$ = STEAL(ie_dstr_t, &$w); }
    *(
        (
          | cfws # ignore spaces
          | DOT {$$ = ie_dstr_append2(E, $$, DSTR_LIT("."));}
        )
        [word:w2 {$$ = ie_dstr_concat(E, $$, STEAL(ie_dstr_t, &$w2));}]
    )
;
# Since we can't always distinguish local part or phrase until afterwards,
# we'll build something that can be post-processed.
local_part_or_phrase_xbr:dstr =
    word:w {$$ = STEAL(ie_dstr_t, &$w); }
    *(
        (
          | cfws {$$ = ie_dstr_add(E, $$, ie_dstr_new2(E, DSTR_LIT(" ")));}
          | DOT {$$ = ie_dstr_add(E, $$, ie_dstr_new2(E, DSTR_LIT(".")));}
        )
        [word:w2 {$$ = ie_dstr_add(E, $$, STEAL(ie_dstr_t, &$w2));}]
    )
;

# dtext is VCHAR except [ ] \
# obs-dtext adds control characters except \0 \r \n \t SPACE
# obs-dtext also allows qp
# there is not a utf8-dtext, but we allow UTF8 out of laziness
# sum total is: qp or UTF8 or ascii except [ ] \ \0 \r \n \t SPACE
dtext = 1*(
# | NIL
# | EOL
# | WS
| NON_WS_CTRL
| DOT
| RPAREN
| LPAREN
| LANGLE
| RANGLE
# | LBRACKET
# | RBRACKET
| ARUBA
| COMMA
| SEMI
| COLON
# | BACKSLASH
| DQUOTE
| SLASH
| QUESTION
| EQ
| TEXT
| UTF8
| EIGHTBIT
| NUM
);

# domain_literal is always joined by cfws
domain_literal:dstr =
    LBRACKET {$$ = ie_dstr_new2(E, DSTR_LIT("["));}
    *fws
    *(
        dtext:d {$$ = ie_dstr_append_from_off(E, $$, @d);}
        *fws
    )
    RBRACKET {$$ = ie_dstr_append2(E, $$, DSTR_LIT("]"));}
;

# domain is dot-atom | domain-literal
# obs-domain uses atoms joined by ".", which allows for cfws
# sum total is "."-joined atoms
# note that in a domain, we ignore spaces from xbr
domain_xbr:dstr =
  | atom:a1  {$$ = ie_dstr_from_off(E, @a1);}
    xbr
    *(
        DOT  {$$ = ie_dstr_append2(E, $$, DSTR_LIT("."));}
        xbr
        atom:a2  {$$ = ie_dstr_append_from_off(E, $$, @a2);}
        xbr
    )
  | domain_literal:d xbr {$$ = STEAL(ie_dstr_t, &$d);}
;

# addr_spec: always use local_part_xbr (skipping spaces)
ign_addr_spec_xbr = local_part_xbr:l ARUBA xbr domain_xbr:d;
addr_spec_xbr:addr = local_part_xbr:l ARUBA xbr domain_xbr:d
    {{  $$ = ie_addr_new(E,
            NULL,                  // name
            STEAL(ie_dstr_t, &$l), // mailbox
            STEAL(ie_dstr_t, &$d)  // domain
        );
    }}
;

# always joined by cfws
# has no semantic value because we always ignore it.
obs_route =
    # any number of leading commas
    *(COMMA xbr)
    # at least one domain
    ARUBA xbr domain_xbr
    # followed by more commas, possibly with more domains
    *(COMMA xbr [ARUBA xbr domain_xbr])
    # terminating in a colon
    COLON
;

# angle_addr is always joined by cfws
# angle-addr is < addr-spec >
# obs-angle-addr adds < [obs-route] addr-spec >
# utf8 adds alt-address, which is non-utf8, but we allow it to be utf8 too.
# technically, alt-address can't appear with obs-route, but whatever.
# semantically, we ignore alt-address because IMAP has no way to report it.
ign_alt_addr = LANGLE xbr ign_addr_spec_xbr RANGLE;
angle_addr:addr =
    LANGLE xbr [obs_route xbr] addr_spec_xbr:a [ign_alt_addr xbr] RANGLE
    { $$ = STEAL(ie_addr_t, &$a); }
;

mailbox_xbr:addr =
  | local_part_or_phrase_xbr:p (
      | angle_addr:a xbr  # named address
        {$$ = ie_addr_set_name(E,
              STEAL(ie_addr_t, &$a),
              with_spaces(E, STEAL(ie_dstr_t, &$p))
          ); }
      | ARUBA xbr domain_xbr:d  # bare address
        { $$ = ie_addr_new(E,
              NULL,
              without_spaces(E, STEAL(ie_dstr_t, &$p)),
              STEAL(ie_dstr_t, &$d)
          ); }
    )
  | angle_addr:a xbr  # bare angle address
    { $$ = STEAL(ie_addr_t, &$a); }
;

# mailbox-list is mailbox *(COMMA mailbox); never empty, no double commas
# obs-mbox-list allows for double commas
# obs-group-list further allows for empty lists, with just commas
# here, we assume the list is non-empty and has no leading commas, but we'll
# allow those in the definition of group.
mailbox_list_xbr:addr =
    mailbox_xbr:m1  {$$ = STEAL(ie_addr_t, &$m1);}
    *(
        COMMA
        xbr
        [mailbox_xbr:m2 {$$ = ie_addr_add(E, $$, STEAL(ie_addr_t, &$m2));}]
    )
;

# group is always joined by cfws
# since we only ever parse this for an IMAP ENVELOPE, we parse it directly
# into the strange format that ENVELOPE specificies, namely:
# - one address with NULL host and mailbox set to the group name
# - any number of normal addresses, which are group memebers
# - one address with NULL mailbox, which is the end of the group.
# (this is never used, but is deconstructed into addr_or_grp_xbr)
# group:addr =
#     phrase_xbr:p  {$$ = ie_addr_new(E, NULL, STEAL(ie_dstr_t, &$p), NULL);}
#     COLON xbr *(COMMA xbr)
#     [mailbox_list_xbr:m  {$$ = ie_addr_add(E, $$, STEAL(ie_addr_t, &$m));}]
#     SEMI
#     {$$ = ie_addr_add(E, $$, ie_addr_new(E, NULL, NULL, NULL));}
# ;

# by definition: address = mailbox | group
# but we need to factor out the phrase/local-part common to all branches
addr_or_grp_xbr:addr =
  | local_part_or_phrase_xbr:p (
      # group (with its weird ENVELOPE structure)
      | {$$ = ie_addr_new(E,
              NULL, with_spaces(E, STEAL(ie_dstr_t, &$p)), NULL
           );}
        COLON xbr *(COMMA xbr)
        [mailbox_list_xbr:m {ie_addr_add(E, $$, STEAL(ie_addr_t, &$m));}]
        SEMI xbr
        {$$ = ie_addr_add(E, $$, ie_addr_new(E, NULL, NULL, NULL));}

      # named address
      | angle_addr:a xbr
        {$$ = ie_addr_set_name(E,
              STEAL(ie_addr_t, &$a),
              with_spaces(E, STEAL(ie_dstr_t, &$p))
          ); }

      # bare address
      | ARUBA xbr domain_xbr:d
        {$$ = ie_addr_new(E,
              NULL,
              without_spaces(E, STEAL(ie_dstr_t, &$p)),
              STEAL(ie_dstr_t, &$d)
          ); }
    )

  # bare angle address
  | angle_addr:a xbr
    { $$ = STEAL(ie_addr_t, &$a); }
;

# address-list is non-empty and no leading/trailing/double commas
# obs-addr-list allows leading/trailing/double commas, but not an empty list
address_list_xbr:addr =
    *(COMMA xbr) addr_or_grp_xbr:a1  {$$ = STEAL(ie_addr_t, &$a1);}
    *(
        COMMA xbr
        [addr_or_grp_xbr:a2 {$$ = ie_addr_add(E, $$, STEAL(ie_addr_t, &$a2));}]
    )
;

# roots:
from_field:addr = xbr mailbox_list_xbr:x EOF     {$$ = STEAL(ie_addr_t, &$x);};
sender_field:addr = xbr mailbox_xbr:x EOF        {$$ = STEAL(ie_addr_t, &$x);};
reply_to_field:addr = xbr address_list_xbr:x EOF {$$ = STEAL(ie_addr_t, &$x);};
to_field:addr = xbr address_list_xbr:x EOF       {$$ = STEAL(ie_addr_t, &$x);};
cc_field:addr = xbr address_list_xbr:x EOF       {$$ = STEAL(ie_addr_t, &$x);};
bcc_field:addr = xbr [address_list_xbr:x {$$ = STEAL(ie_addr_t, &$x);}] EOF;

# always joined by cfws
# - id_left is DOT-joined ATOMS with no cfws in or around them
#   obs-id-left is just a local-part, which for us is just a phrase
# - id_right is DOT-joined ATOMS again, or a no-fold domain literal ("[...]")
#   obs-right is just domain
msg_id:dstr =
    LANGLE xbr local_part_xbr:l ARUBA xbr domain_xbr:d RANGLE
    {{  $$ = ie_dstr_new2(E, DSTR_LIT("<"));
        $$ = ie_dstr_concat(E, $$, STEAL(ie_dstr_t, &$l));
        $$ = ie_dstr_append2(E, $$, DSTR_LIT("@"));
        $$ = ie_dstr_concat(E, $$, STEAL(ie_dstr_t, &$d));
        $$ = ie_dstr_append2(E, $$, DSTR_LIT(">"));
    }}
;

# IMAP wants a single string with these values, so we join msg-ids one string
msg_ids_xbr:dstr =
    1*(
        msg_id:m  {{ if($$) $$ = ie_dstr_append2(E, $$, DSTR_LIT(" "));
                     $$ = ie_dstr_concat(E, $$, STEAL(ie_dstr_t, &$m)); }}
        xbr
    )
;

# roots:
# note: present-but-empty date/subj/in-reply-to/msg-id should be non-NIL
msg_id_field:dstr =      xbr msg_id:m xbr EOF   {$$ = STEAL(ie_dstr_t, &$m);};
in_reply_to_field:dstr = xbr msg_ids_xbr:m EOF  {$$ = STEAL(ie_dstr_t, &$m);};


### MIME-related things ###

# always joined by cfws
# rfc2045: token is VCHAR except ()<>@,;:\"/[]?=
# which is atom, adding DOT and removing /=?
# (we'll assume all of UTF8 is fine too)
token = 1*(
| DOT
| TEXT
| UTF8
| EIGHTBIT
| NUM
);

# always joined by cfws
# rfc2045: type = discrete-type / composite-type
# we actually only care about composite types
typ = MESSAGE | MULTIPART | token;
# for subtype, we only parse out the known subtypes we care about
# RFC822: message/rfc822 for embedded imf messages
# DIGEST: multipart/digest changes the default content-type to message/rfc822
subtype = RFC822 | DIGEST | token;

# always joined by cfws
param_value = (token | quoted_string);
param = token:attr xbr EQ xbr param_value;

# note that 7BIT, 8BIT, and BINARY indicate that no encoding has been applied
# defaults to 7BIT, when not present
# note that BINARY is not really valid in email, due to smtp restrictions
# also note that multipart messages cannot be encoded, so since we only care
# about composite messages, we don't care terribly much about this field.
# TODO: rfc5335 allows message/global-type messages to have encoding, but I
# don't know if it's widely-used enough to have to deal with.  I'll leave out
# support for it for now and fix it if anybody notices.
## mechanism = (7BIT | 8BIT | BINARY | QUOTED_PRINTABLE | BASE64 | token);
## content_transfer_encoding_field = xbr mechanism xbr;

# multipart-body can't be parsed by a generated parser due to the dynamic
# nature of the boundary, but it's very easy to split the bodies by hand and
# use a generated parser for the inner parts.
## multipart-body =
##   preamble boundary
##   body-part (*boundary body-part)
##   end-boundary epilogue

# body-part is what appears between two boundary lines
# like the overall imf, it requires two-pass parsing, as the parsing of the
# body depends on the semantic values of the headers in the message.
## body_part = hdrs;

# roots:
mime_version_field = xbr NUM xbr DOT xbr NUM;
content_type_field = xbr typ xbr SLASH xbr subtype xbr *(SEMI xbr param xbr);
