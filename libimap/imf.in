# imf grammar
#  rfc5322: imf
#  rfc5335: utf8 extensions to imf
#  rfc5234: general ANBF
#  rfc2045: mime, part 1/5, mime-related headers
#  rfc2047: mime, part 3/5, mime parameter encoding
#  rfc1864: content-md5 header
#  rfc2183: content-disposition header
#  rfc3066: language tags
#  rfc3282: content-language header
#  rfc2557: content-location header

{{#include <libimap/libimap.h>

// steal %param buf and %param skip via a macro
#define DSTR_OFF_ZERO(prev) dstr_off_zero(prev, buf, skip)

// for local_part_or_phrase_xbr
static ie_dstr_t *with_spaces(derr_t *E, ie_dstr_t *list){
    if(is_error(*E)){
        ie_dstr_free(list);
        return NULL;
    }
    ie_dstr_t *out = NULL;
    ie_dstr_t *next = list;
    for(ie_dstr_t *p = next; p; p = next){
        // break the links as we go
        next = p->next;
        p->next = NULL;
        out = ie_dstr_concat(E, out, p);
    }
    // remove trailing whitespace
    out->dstr.len = dstr_rstrip_chars(out->dstr, ' ').len;
    return out;
}

// for local_part_or_phrase_xbr
static ie_dstr_t *without_spaces(derr_t *E, ie_dstr_t *list){
    if(is_error(*E)){
        ie_dstr_free(list);
        return NULL;
    }
    ie_dstr_t *out = NULL;
    ie_dstr_t *next = list;
    for(ie_dstr_t *p = next; p; p = next){
        // break the links as we go
        next = p->next;
        p->next = NULL;
        if(dstr_cmp2(p->dstr, DSTR_LIT(" ")) == 0){
            ie_dstr_free(p);
        }else{
            out = ie_dstr_concat(E, out, p);
        }
    }
    return out;
}

}}

%generator c;
%prefix imf;
%param E {derr_t *};
%param buf {const dstr_t *};
%param skip {size_t};

%kwarg semloc_type dstr_off_t;
%kwarg span_fn dstr_off_extend;
%kwarg zero_loc_fn DSTR_OFF_ZERO;
%kwarg error_fn imf_handle_error;

%root hdrs;
%root unstruct_field;
%root subj_field; # alias for unstruct_field
%root from_field;
%root sender_field;
%root reply_to_field;
%root to_field;
%root cc_field;
%root bcc_field;
%root date_field;
%root in_reply_to_field;
%root msg_id_field;
%root mime_version_field;
%root content_type_field;
%root content_transfer_encoding_field; # alias for single_token_field
%root content_id_field;
%root content_disposition_field;
%root content_md5_field;
%root content_language_field;
%root content_location_field;
%root content_description_field; # alias for unstruct_field

%type hdr {imf_hdr_t*} {imf_hdr_free($$);};
%type hdrs {imf_hdrs_t*} {imf_hdrs_free($$);};
%type addr {ie_addr_t*} {ie_addr_free($$);};
%type dstr {ie_dstr_t*} {ie_dstr_free($$);};
%type bool {bool};
%type i32 {int};
%type time {imap_time_t};
%type ver {mime_version_t};
%type param {mime_param_t*} {mime_param_free($$);};
%type content_type {mime_content_type_t*} {mime_content_type_free($$);};
%type disp {ie_body_disp_t*} {ie_body_disp_free($$);};

# non-keyword tokens
NIL;
EOL;  # CR/CRLF/LFCR/LF handled by tokenizer
WS;
NON_WS_CTRL;
DOT;
RPAREN;
LPAREN;
LANGLE;
RANGLE;
LBRACKET;
RBRACKET;
ARROBA;
COMMA;
SEMI;
COLON;
BACKSLASH;
DQUOTE;
SLASH;
QUESTION;
EQ;
DASH;
PLUS;
ALPHA;
NUM;
SYM;
UTF8;
EIGHTBIT;
EOF;

# ALPHANUM is a psuedotoken that we allow any time we allow ALPHA and NUM,
# since we can have keywords (even RFC822) fallback to this.
ALPHANUM;

# keyword tokens
MESSAGE;
MULTIPART;
RFC822;
DIGEST;

MON;
TUE;
WED;
THU;
FRI;
SAT;
SUN;

JAN;
FEB;
MAR;
APR;
MAY;
JUN;
JUL;
AUG;
SEP;
OCT;
NOV;
DEC;

%fallback ALPHA MESSAGE MULTIPART DIGEST
                MON TUE WED THU FRI SAT SUN
                JAN FEB MAR APR MAY JUN JUL AUG SEP OCT NOV DEC;
%fallback ALPHANUM ALPHA NUM RFC822;

### ENTIRE DOCUMENTS ###
# treat all headers unstructured
# structured things can be parsed in a second pass
# don't bother parsing the body itself; it's always just "what's left".  If
# after the first pass we detect that the body contains an imf-like structure,
# we might end up parsing it in a second pass (again, just the headers).

# header separator might be missing in some non-compliant bodyless messages
eoh = EOL | EOF;

hdrs_0:hdr =
    *(hdr:h { $$ = imf_hdr_add(E, $$, STEAL(imf_hdr_t, &$h)); } )
;
hdrs:hdrs =
    hdrs_0:h
    eoh:sep
    { $$ = imf_hdrs_new(E, @$, @sep, STEAL(imf_hdr_t, &$h)); }
;

# field-name is any printable character except COLON
# technically even utf8 isn't allowed there, but we'll allow it anyway.
field_name = 1*(
# | NIL
# | EOL
# | WS
# | NON_WS_CTRL
| DOT
| RPAREN
| LPAREN
| LANGLE
| RANGLE
| LBRACKET
| RBRACKET
| ARROBA
| COMMA
| SEMI
# | COLON
| BACKSLASH
| DQUOTE
| SLASH
| QUESTION
| EQ
| DASH
| PLUS
| ALPHANUM
| SYM
| UTF8
| EIGHTBIT
);

# rfc5322: unstructured is VCHAR+WSP (can be joined by fws)
# obs-unstruct allows any number of LF or CR which do not form a CRLF, which is
# absolutely insane.  We don't allow that.  Otherwise, obs-unstruct fields can
# contain anything they want.
# Note that the folds and WS are not handled here.
unstruct =
| NIL
# | EOL
# | WS
| NON_WS_CTRL
| DOT
| RPAREN
| LPAREN
| LANGLE
| RANGLE
| LBRACKET
| RBRACKET
| ARROBA
| COMMA
| SEMI
| COLON
| BACKSLASH
| DQUOTE
| SLASH
| QUESTION
| EQ
| DASH
| PLUS
| ALPHANUM
| SYM
| UTF8
| EIGHTBIT
;

xunstruct = *(unstruct|WS);

# rfc5322: header fields cannot have whitespace before the colon
# obs-optional allows that though, so we allow it
hdr:hdr =
    field_name:n
    *WS
    COLON
    xunstruct:v
    EOL
    *(
        WS
        xunstruct:v2 {@v = dstr_off_extend(@v, @v2);}
        EOL
    )
    { $$ = imf_hdr_new(E, @$, @n, @v); }
;

# rfc5322's text is identical to our approximation of obs-unstruct.
# In this grammar, we only text to "parse" an unstructured header which just
# collapses folds into a single space.
text = unstruct *(unstruct | WS);

unstruct_field_base:dstr =
    {$$ = ie_dstr_new_empty(E);}
    *WS  # ignore leading whitespace
    [text:t1  {$$ = ie_dstr_append_from_off(E, $$, @t1);}]
    *(
        # folds become one space:
        1*(EOL 1*WS)  {$$ = ie_dstr_append2(E, $$, DSTR_LIT(" "));}
        (
          | text:t2  {$$ = ie_dstr_append_from_off(E, $$, @t2);}
          | %return  # it's ok to end with a fold
        )
    )
;
unstruct_field:dstr = unstruct_field_base:u EOF  {$$ = STEAL(ie_dstr_t, &$u);};
subj_field:dstr = unstruct_field:u  {$$ = STEAL(ie_dstr_t, &$u);};

### IMF BASICS ###

# from ANBF rfc (rfc5234):
# WSP = \t SPACE
# VCHAR = 0x21 - 0x7E
# CTL = 0x00 - 0x1F , 0x7F

# FWS: [*WS EOL] WS *WS
# obs-FWS: WS *WS *(EOL WS *WS)
# FWS allows for eol-ws instead of ws-eol-ws.
# obs-FWS allows for multiple consecutive folds.
# We allow a superset of both.
# Note that fws wouldn't be safe to use if you were _expecting_ an EOL; the
# repeat point would be wrong.  But since we have a two-step parser, when we
# parse a structured header, we've already excluded the header-terminating EOL
# from the text we examine, so we can safely ignore that issue.
fws = [EOL] WS;

# ctext is VCHAR except ()\
# obs-ctext adds control characters except \0 \r \n \t SPACE
# utf8-ctext adds UTF8
# sum total is: UTF8 or ASCII except ( ) \\ \0 \r \n \t SPACE
ctext =
# | NIL
# | EOL
# | WS
| NON_WS_CTRL
| DOT
# | RPAREN
# | LPAREN
| LANGLE
| RANGLE
| LBRACKET
| RBRACKET
| ARROBA
| COMMA
| SEMI
| COLON
# | BACKSLASH
| DQUOTE
| SLASH
| QUESTION
| EQ
| DASH
| PLUS
| ALPHANUM
| SYM
| UTF8
| EIGHTBIT
;

# comment: again we allow consecutive folds, out of lazieness and leniency
comment = LPAREN *(fws | ctext | ign_quoted_pair | comment) RPAREN;

# cfws: again we allow consecutive folds.
cfws = 1*(fws | comment);

# "maybe break"
xbr:bool = [cfws {$$ = true;}];

# atom is always joined by cfws
# ALPHA DIGIT UTF8 !#$%&'*+-/=?^_`{|}~
atom_base =
# | NIL
# | EOL
# | WS
# | NON_WS_CTRL
# | DOT
# | RPAREN
# | LPAREN
# | LANGLE
# | RANGLE
# | LBRACKET
# | RBRACKET
# | ARROBA
# | COMMA
# | SEMI
# | COLON
# | BACKSLASH
# | DQUOTE
| SLASH
| QUESTION
| EQ
| DASH
| PLUS
| ALPHANUM
| SYM
| UTF8
| EIGHTBIT
;
atom = 1*atom_base;

# dot-atom is atoms joined by '.' but _not_ cfws
# dot-atom itself is always joined by cfws
dot_atom = atom *(DOT atom);

empty_dstr:dstr = %empty {$$ = ie_dstr_new_empty(E);};
null_dstr:dstr = %empty;

# the standard is not clear about the semantic value of FWS in quoted strings.
# in some places it says "runs of FWS between lexical tokens are treated as a
# single space" and in other places it says that the "CLRF in any FWS that
# appear that appear within the quoted-string are invisible", i.e. that the
# space after the fold are allowed.
#
# In this case, I think we can assume that the more specific guidance applies.
qfws(base:dstr) = [EOL] WS:w {$base = ie_dstr_append_from_off(E, $base, @w);};

# qtext is VCHAR except "\
# obs-qtext adds control characters except \0 \r \n \t SPACE
# utf8-qtext adds UTF8
# sum total is: UTF8 or ASCII except \\ " \0 \r \n \t SPACE
_qtext =
# | NIL
# | EOL
# | WS
| NON_WS_CTRL
| DOT
| RPAREN
| LPAREN
| LANGLE
| RANGLE
| LBRACKET
| RBRACKET
| ARROBA
| COMMA
| SEMI
| COLON
# | BACKSLASH
# | DQUOTE
| SLASH
| QUESTION
| EQ
| DASH
| PLUS
| ALPHANUM
| SYM
| UTF8
| EIGHTBIT
;
qtext(base:dstr) = _qtext:q {$base = ie_dstr_append_from_off(E, $base, @q);};

# quoted-pair is backslash followed by VCHAR or WSP
# obs-qp adds control characters except \r and \n
# utf8-quoted-par adds UTF8
# obs-qp actually allows \r and \n, which is insane.  We disallow that.
# Note that the obs-qp could't cancel the whole EOL anyway since EOL is
# supposed to be two characters long.  If our parser could handle CR and NL
# individually (rather than having the scanner handle it) we could allow it.
# Additionally, proper quoted-pair support would require us to pull exactly
# one character from the scanner after the backslash, but it turns out that we
# only have to pull one character from the *escapable* character sets, which is
# basically RPAREN, DQUOTE, NON_WS_CTRL, and EIGHTBIT.  Of those, only EIGHTBIT
# was even multi-character to begin with.
escapable =
| NIL
# | EOL
| WS
| NON_WS_CTRL
| DOT
| RPAREN
| LPAREN
| LANGLE
| RANGLE
| LBRACKET
| RBRACKET
| ARROBA
| COMMA
| SEMI
| COLON
| BACKSLASH
| DQUOTE
| SLASH
| QUESTION
| EQ
| DASH
| PLUS
| ALPHANUM
| SYM
| UTF8
| EIGHTBIT
;
ign_quoted_pair = BACKSLASH escapable;
quoted_pair(base:dstr) =
    BACKSLASH escapable:esc
    {$base = ie_dstr_append_from_off(E, $base, @esc);}
;

# quoted_string is always joined by cfws
# "any combination of qtext, quoted pair, or fws"
quoted_string_append(base:dstr) =
    DQUOTE
    *(
      | qtext!(base)
      | quoted_pair!(base)
      | qfws!(base)
    )
    DQUOTE
;
quoted_string:dstr =
    empty_dstr:out
    quoted_string_append!(out)
    {$$ = STEAL(ie_dstr_t, &$out);}
;

# We actually don't ever support a plain phrase_xbr; it's always factored out
# phrase_xbr:dstr = 1*( (atom_base|DOT|quoted_string) xbr);

### From-related things ###

# local-part is dot-atom | quoted-string
# obs-local-part allows word *(DOT word), which adds cfws
# We'll support a superset of those, which allows for leading and trailing DOT
# In fact, we're so lazy, we just let local_part be a phrase.
# Also note that for local_part, obsolete folds should not result in a space.
local_part_xbr:dstr =
    empty_dstr:out
    local_part_xbr_append!(out)
    {$$ = STEAL(ie_dstr_t, &$out);}
;
local_part_xbr_append(out:dstr) =
    lp_chunk_append!(out)
    *(
        cfws
        (lp_chunk_append!(out) | %return )
    )
;
# Since we can't always distinguish local part or phrase until afterwards,
# we'll build something that can be post-processed.
local_part_or_phrase_xbr:dstr =
    null_dstr:out
    lp_chunk_add!(out)
    *(
        lp_cfws_add!(out)
        (
          | lp_chunk_add!(out)
          | {$$ = STEAL(ie_dstr_t, &$out);} %return
        )
    )
    {$$ = STEAL(ie_dstr_t, &$out);}
;
lp_chunk_append(out:dstr) =
    1*(
      | quoted_string_append!(out)
        # yeah, this will append one byte at a time:
      | atom_base:x {$out = ie_dstr_append_from_off(E, $out, @x);}
      | DOT:x {$out = ie_dstr_append_from_off(E, $out, @x);}
    )
;
lp_chunk:dstr =
    empty_dstr:out
    lp_chunk_append!(out)
    {$$ = STEAL(ie_dstr_t, &$out);}
;
lp_chunk_add(list:dstr) =
    lp_chunk:c
    {$list = ie_dstr_add(E, $list, STEAL(ie_dstr_t, &$c));}
;
lp_cfws_add(list:dstr) =
    cfws
    {$list = ie_dstr_add(E, $list, ie_dstr_new2(E, DSTR_LIT(" ")));}
;
# post-process local_part_or_phrase_xbr
with_spaces(lpp:dstr):dstr =
    %empty {$$ = with_spaces(E, STEAL(ie_dstr_t, &$lpp));}
;
without_spaces(lpp:dstr):dstr =
    %empty {$$ = without_spaces(E, STEAL(ie_dstr_t, &$lpp));}
;

# dtext is VCHAR except [ ] \
# obs-dtext adds control characters except \0 \r \n \t SPACE
# obs-dtext also allows qp
# there is not a utf8-dtext, but we allow UTF8 out of laziness
# sum total is: qp or UTF8 or ascii except [ ] \ \0 \r \n \t SPACE
dtext = 1*(
# | NIL
# | EOL
# | WS
| NON_WS_CTRL
| DOT
| RPAREN
| LPAREN
| LANGLE
| RANGLE
# | LBRACKET
# | RBRACKET
| ARROBA
| COMMA
| SEMI
| COLON
# | BACKSLASH
| DQUOTE
| SLASH
| QUESTION
| EQ
| DASH
| PLUS
| ALPHANUM
| SYM
| UTF8
| EIGHTBIT
);

domain_literal_body:dstr =
    {$$ = ie_dstr_new2(E, DSTR_LIT("["));}
    *fws
    *(
        dtext:d {$$ = ie_dstr_append_from_off(E, $$, @d);}
        (
          | 1*fws
          | %return
        )
    )
;

# domain_literal is always joined by cfws
domain_literal:dstr =
    LBRACKET
    domain_literal_body:b
      {{ $$ = STEAL(ie_dstr_t, &$b);
         $$ = ie_dstr_append2(E, $$, DSTR_LIT("]")); }}
    RBRACKET
;

# domain is dot-atom | domain-literal
# obs-domain uses atoms joined by ".", which allows for cfws
# sum total is "."-joined atoms
# note that in a domain, we ignore spaces from xbr
domain_xbr:dstr =
  | atom:a1  {$$ = ie_dstr_from_off(E, @a1);}
    xbr
    *(
        DOT  {$$ = ie_dstr_append2(E, $$, DSTR_LIT("."));}
        xbr
        atom:a2  {$$ = ie_dstr_append_from_off(E, $$, @a2);}
        xbr
    )
  | domain_literal:d xbr {$$ = STEAL(ie_dstr_t, &$d);}
;

# addr_spec: always use local_part_xbr (skipping spaces)
ign_addr_spec_xbr = local_part_xbr ARROBA xbr domain_xbr;
addr_spec_xbr:addr = local_part_xbr:l _addr_spec_xbr!(l):a
    {{ $$ = STEAL(ie_addr_t, &$a); }}
;
# _addr_spec_xbr: for when you've already parsed the local_part_or_phrase
_addr_spec_xbr(l:dstr):addr = ARROBA xbr domain_xbr:d
    {{  $$ = ie_addr_new(E,
            NULL,                   // name
            STEAL(ie_dstr_t, &$l),  // mailbox
            STEAL(ie_dstr_t, &$d)   // domain
        );
    }}
;

# always joined by cfws
# has no semantic value because we always ignore it.
obs_route =
    # any number of leading commas
    *(COMMA xbr)
    # at least one domain
    ARROBA xbr domain_xbr
    # followed by more commas, possibly with more domains
    *(COMMA xbr [ARROBA xbr domain_xbr])
    # terminating in a colon
    COLON
;

# angle_addr is always joined by cfws
# angle-addr is < addr-spec >
# obs-angle-addr adds < [obs-route] addr-spec >
# utf8 adds alt-address, which is non-utf8, but we allow it to be utf8 too.
# technically, alt-address can't appear with obs-route, but whatever.
# semantically, we ignore alt-address because IMAP has no way to report it.
ign_alt_addr = LANGLE xbr ign_addr_spec_xbr RANGLE;
angle_addr:addr =
    LANGLE xbr [obs_route xbr] addr_spec_xbr:a [ign_alt_addr xbr] RANGLE
    { $$ = STEAL(ie_addr_t, &$a); }
;

# _named_addr always ends up with the name factored out
_named_addr(name:dstr):addr = angle_addr:addr
    {{  $$ = ie_addr_set_name(E,
            STEAL(ie_addr_t, &$addr),
            STEAL(ie_dstr_t, &$name)
        );
    }}
;

mailbox_xbr:addr =
  | local_part_or_phrase_xbr:p (
      # named address
      | with_spaces!(p):n
        _named_addr!(n):a xbr { $$ = STEAL(ie_addr_t, &$a); }
      # bare address
      | without_spaces!(p):lp
        _addr_spec_xbr!(lp):a { $$ = STEAL(ie_addr_t, &$a); }
    )
  # bare angle address
  | angle_addr:a xbr { $$ = STEAL(ie_addr_t, &$a); }
;

# mailbox-list is mailbox *(COMMA mailbox); never empty, no double commas
# obs-mbox-list allows for double commas
# obs-group-list further allows for empty lists, with just commas
# here, we assume the list is non-empty and has no leading commas, but we'll
# allow those in the definition of group.
mailbox_list_xbr:addr =
    mailbox_xbr:m1  {$$ = STEAL(ie_addr_t, &$m1);}
    *(
        COMMA xbr
        [mailbox_xbr:m2 {$$ = ie_addr_add(E, $$, STEAL(ie_addr_t, &$m2));}]
    )
;
obs_mbx_list_xbr:addr =
    *(COMMA xbr)
    mailbox_list_xbr:x
    {$$ = STEAL(ie_addr_t, &$x);}
;

# group is always joined by cfws
# since we only ever parse this for an IMAP ENVELOPE, we parse it directly
# into the strange format that ENVELOPE specificies, namely:
# - one address with NULL host and mailbox set to the group name
# - any number of normal addresses, which are group memebers
# - one address with NULL mailbox, which is the end of the group.
# (this is only used in addr_or_grp_xbr, where the name is factored out)
_group(name:dstr):addr =
    {$$ = ie_addr_new(E, NULL, STEAL(ie_dstr_t, &$name), NULL);}
    COLON xbr *(COMMA xbr)
    [mailbox_list_xbr:m  {$$ = ie_addr_add(E, $$, STEAL(ie_addr_t, &$m));}]
    SEMI
    {$$ = ie_addr_add(E, $$, ie_addr_new(E, NULL, NULL, NULL));}
;

# by definition: address = mailbox | group
# but we need to factor out the phrase/local-part common to all branches
addr_or_grp_xbr:addr =
  | local_part_or_phrase_xbr:p (
      # group
      | with_spaces!(p):n
        _group!(n):g xbr
        {$$ = STEAL(ie_addr_t, &$g);}
      # named address
      | with_spaces!(p):n
        _named_addr!(n):a xbr
        { $$ = STEAL(ie_addr_t, &$a); }
      # bare address
      | without_spaces!(p):lp
        _addr_spec_xbr!(lp):a
        { $$ = STEAL(ie_addr_t, &$a); }
    )
  # bare angle address
  | angle_addr:a xbr { $$ = STEAL(ie_addr_t, &$a); }
;

# address-list is non-empty and no leading/trailing/double commas
# obs-addr-list allows leading/trailing/double commas, but not an empty list
address_list_xbr:addr =
    *(COMMA xbr) addr_or_grp_xbr:a1  {$$ = STEAL(ie_addr_t, &$a1);}
    *(
        COMMA xbr
        [addr_or_grp_xbr:a2 {$$ = ie_addr_add(E, $$, STEAL(ie_addr_t, &$a2));}]
    )
;

# we actually ignore day_of_week value
day_of_week = MON | TUE | WED | THU | FRI | SAT | SUN;

month:i32 =
  | JAN { $$ = 1; }
  | FEB { $$ = 2; }
  | MAR { $$ = 3; }
  | APR { $$ = 4; }
  | MAY { $$ = 5; }
  | JUN { $$ = 6; }
  | JUL { $$ = 7; }
  | AUG { $$ = 8; }
  | SEP { $$ = 9; }
  | OCT { $$ = 10; }
  | NOV { $$ = 11; }
  | DEC { $$ = 12; }
;

day:i32 = NUM:n { $$ = parse_int_within(E, @n, 1, 31); };
# obs-year allows a 2-digit year in the date field which we take to be pre-2000
year:i32 = NUM:n {
    $$ = parse_int(E, @n);
    if(!is_error(*E) && $$ < 100) $$ += 1900;
};
hour:i32 = NUM:n { $$ = parse_int_within(E, @n, 0, 23); };
min_or_sec:i32 = NUM:n { $$ = parse_int_within(E, @n, 0, 59); };
zone:time =
  | (PLUS {$$.z_hour = 1;} | DASH {$$.z_hour = -1;}) NUM:n
        {
            int z = parse_int_within(E, @n, 0, 2359);
            $$.z_min = z % 100;
            if($$.z_min > 59) $$.z_min = 0;
            $$.z_hour *= (z - $$.z_min) / 100;
        }
  | ALPHA
;

# this is the IMF date-time, not the IMAP date-time
date_time:time =
    [day_of_week xbr COMMA xbr]
    day:d                   { $$.day = $d; }
    xbr
    month:M                 { $$.month = $M; }
    xbr
    year:y                  { $$.year = $y; }
    xbr
    hour:h                  { $$.hour = $h; }
    COLON
    min_or_sec:m            { $$.min = $m; }
    [ COLON min_or_sec:s    { $$.sec = $s; } ]
    xbr
    zone:z                  { $$.z_hour = $z.z_hour; $$.z_min = $z.z_min; }
;

# roots:
from_field:addr = xbr obs_mbx_list_xbr:x EOF     {$$ = STEAL(ie_addr_t, &$x);};
sender_field:addr = xbr mailbox_xbr:x EOF        {$$ = STEAL(ie_addr_t, &$x);};
reply_to_field:addr = xbr address_list_xbr:x EOF {$$ = STEAL(ie_addr_t, &$x);};
to_field:addr = xbr address_list_xbr:x EOF       {$$ = STEAL(ie_addr_t, &$x);};
cc_field:addr = xbr address_list_xbr:x EOF       {$$ = STEAL(ie_addr_t, &$x);};
bcc_field:addr = xbr [address_list_xbr:x {$$ = STEAL(ie_addr_t, &$x);}] EOF;
date_field:time = xbr date_time:x xbr EOF        {$$ = $x; };

# always joined by cfws
# - id_left is DOT-joined ATOMS with no cfws in or around them
#   obs-id-left is just a local-part, which for us is just a phrase
# - id_right is DOT-joined ATOMS again, or a no-fold domain literal ("[...]")
#   obs-right is just domain
msg_id:dstr =
    LANGLE xbr local_part_xbr:l ARROBA xbr domain_xbr:d RANGLE
    {{  $$ = ie_dstr_new2(E, DSTR_LIT("<"));
        $$ = ie_dstr_concat(E, $$, STEAL(ie_dstr_t, &$l));
        $$ = ie_dstr_append2(E, $$, DSTR_LIT("@"));
        $$ = ie_dstr_concat(E, $$, STEAL(ie_dstr_t, &$d));
        $$ = ie_dstr_append2(E, $$, DSTR_LIT(">"));
    }}
;

# IMAP wants a single string with these values, so we join msg-ids one string
msg_ids_xbr:dstr =
    1*(
        msg_id:m  {{ if($$) $$ = ie_dstr_append2(E, $$, DSTR_LIT(" "));
                     $$ = ie_dstr_concat(E, $$, STEAL(ie_dstr_t, &$m)); }}
        xbr
    )
;

# roots:
# note: present-but-empty date/subj/in-reply-to/msg-id should be non-NIL
msg_id_field:dstr =      xbr msg_id:m xbr EOF   {$$ = STEAL(ie_dstr_t, &$m);};
in_reply_to_field:dstr = xbr msg_ids_xbr:m EOF  {$$ = STEAL(ie_dstr_t, &$m);};


### MIME-related things ###

# always joined by cfws
# rfc2045: token is VCHAR except ()<>@,;:\"/[]?=
# which is atom, adding DOT and removing /=?
# (we'll assume all of UTF8 is fine too)
token = 1*(
# | NIL
# | EOL
# | WS
# | NON_WS_CTRL
| DOT
# | RPAREN
# | LPAREN
# | LANGLE
# | RANGLE
# | LBRACKET
# | RBRACKET
# | ARROBA
# | COMMA
# | SEMI
# | COLON
# | BACKSLASH
# | DQUOTE
# | SLASH
# | QUESTION
# | EQ
| DASH
| PLUS
| ALPHANUM
| SYM
| UTF8
| EIGHTBIT
);

# always joined by cfws
# rfc2045: type = discrete-type / composite-type
# we actually only care about composite types
type = MESSAGE | MULTIPART | token;
# for subtype, we only parse out the known subtypes we care about
# RFC822: message/rfc822 for embedded imf messages
# DIGEST: multipart/digest changes the default content-type to message/rfc822
subtype = RFC822 | DIGEST | token;

# always joined by cfws
param_value:dstr =
  | token:t          {$$ = ie_dstr_from_off(E, @t);}
  | quoted_string:q  {$$ = STEAL(ie_dstr_t, &$q);}
;

# always joined by cfws
param:param =
    token:k xbr EQ xbr param_value:v
    {{  $$ = mime_param_new(E,
            ie_dstr_from_off(E, @k),
            STEAL(ie_dstr_t, &$v)
        );
    }}
;

params_xbr:param =
    *(
        SEMI xbr param:p xbr
        {$$ = mime_param_add(E, $$, STEAL(mime_param_t, &$p));}
    )
;

# always joined by cfws
content_type_xbr:content_type =
    type:type xbr SLASH xbr subtype:subtype xbr params_xbr:p
    {{  $$ = mime_content_type_new(E,
            ie_dstr_from_off(E, @type),
            ie_dstr_from_off(E, @subtype),
            STEAL(mime_param_t, &$p)
        );
    }}
;

# multipart-body can't be parsed by a generated parser due to the dynamic
# nature of the boundary, but it's very easy to split the bodies by hand and
# use a generated parser for the inner parts.
## multipart-body =
##   preamble boundary
##   body-part (*boundary body-part)
##   end-boundary epilogue

# body-part is what appears between two boundary lines
# like the overall imf, it requires two-pass parsing, as the parsing of the
# body depends on the semantic values of the headers in the message.
## body_part = hdrs;

# always joined by cfws
# mime_version: pretty simple.
mime_version:ver =
    NUM:maj xbr DOT xbr NUM:min
    {{ bool ok;
       $$ = mime_version_parse(@maj, @min, &ok);
       if(!ok) return IMF_STATUS_SYNTAX_ERROR;
    }}
;

# roots:
mime_version_field:ver = xbr mime_version:ver xbr EOF {$$ = $ver;};

content_type_field:content_type =
    xbr content_type_xbr:ct EOF
    {$$ = STEAL(mime_content_type_t, &$ct);}
;

single_token_field:dstr = xbr token:t xbr EOF  {$$ = ie_dstr_from_off(E, @t);};

# note that 7BIT, 8BIT, and BINARY indicate that no encoding has been applied
# defaults to 7BIT, when not present
# note that BINARY is not really valid in email, due to smtp restrictions.
# also note that multipart messages cannot be encoded.
# TODO: rfc5335 allows message/global-type messages to have encoding, but I
# don't know if it's widely-used enough to have to deal with.  I'll leave out
# support for it for now and fix it if anybody notices.
# mechanism = (7BIT | 8BIT | BINARY | QUOTED_PRINTABLE | BASE64 | token);
# content_transfer_encoding_field:dstr =
#     xbr mechanism:m xbr
#     {$$ = ie_dstr_from_off(E, @m);}
# ;
content_transfer_encoding_field:dstr = single_token_field:s  {$$ = STEAL(ie_dstr_t, &$s);};

# we could be more strict here if md5 weren't a joke
content_md5_field:dstr = xbr atom:a xbr EOF  {$$ = ie_dstr_from_off(E, @a);};

# content_id is syntactically identical to msg_id
content_id_field:dstr = msg_id_field:m  {$$ = STEAL(ie_dstr_t, &$m);};

# rfc2183: Content-Disposition
content_disposition_field:disp =
    xbr token:t xbr params_xbr:p EOF
    {{  $$ = ie_body_disp_new(E,
            ie_dstr_from_off(E, @t),
            STEAL(mime_param_t, &$p)
        );
    }}
;

# rfc3066: language tags
primary_subtag = 1*ALPHA;
secondary_subtag = 1*(ALPHANUM);
lang_tag = primary_subtag *(DASH secondary_subtag);

# rfc3282: Content-Language
langs_xbr:dstr =
    lang_tag:l  {$$ = ie_dstr_from_off(E, @l);}
    xbr
    *(
        COMMA xbr lang_tag:l2 xbr
        {$$ = ie_dstr_add(E, $$, ie_dstr_from_off(E, @l2));}
    )
;
content_language_field:dstr =
    xbr langs_xbr:l EOF
    {$$ = STEAL(ie_dstr_t, &$l);}
;

# rfc2557: Content-Location
# The URI in Content-Location seems to allow nearly anything allowed in an imf
# header, with a particular folding scheme.
# The list of unsafe characters is: CTRL SP < > " # % { } \ \ ^ ~ [ ] `
# We'll be generous though, and only disallow a few things
uri_base = 1*(
# | NIL
# | EOL
# | WS
# | NON_WS_CTRL
| DOT
# | RPAREN
# | LPAREN
| LANGLE
| RANGLE
| LBRACKET
| RBRACKET
| ARROBA
| COMMA
| SEMI
| COLON
| BACKSLASH
| DQUOTE
| SLASH
| QUESTION
| EQ
| DASH
| PLUS
| ALPHANUM
| SYM
| UTF8
| EIGHTBIT
)
;
# simply discard all whitespace
uri:dstr =
    uri_base:u1  {$$ = ie_dstr_from_off(E, @u1);}
    *(
        1*(EOL|WS) (
          | uri_base:u2 {$$ = ie_dstr_append_from_off(E, $$, @u2);}
          | %return
        )
    )
;

# cfws appears before/after uri, but not within
content_location_field:dstr =
    xbr uri:u [comment xbr] EOF
    {$$ = STEAL(ie_dstr_t, &$u);}
;

# rfc2045: Content-Description is just *text.  Technically that means that it
# cannot include a linebreak, but I'm assuming I'll see that in the wild.
# It can't contain comments because text can contain unmatched parens.
# So we choose to treat it as another unstruct field.
content_description_field:dstr =
    unstruct_field:u
    {$$ = STEAL(ie_dstr_t, &$u);}
;
